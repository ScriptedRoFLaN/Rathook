#!/usr/bin/env bash

#-- Updates cunthook locally to generate/update a .so file for injecting
#-- this updates the data path, changes to files and dependency checks.

sudo=${CH_SUDO:-sudo};

if [ $(id -u) -eq 0 ]; then
    echo -e "Please do not attempt to use \"sudo\" with the update script";
    exit 1;
fi

#-- Removes the need for cmake or a seperate file to install the data to 
#-- opt/cunthook and instead dynamically checks for requirement of sudo
#-- making the update file actually 1 file.
function InstallData() {
    [[ ! -z "$SUDO_USER" ]] && user=$SUDO_USER || user=$LOGNAME;
    DATA_PATH=${1:-/opt/cunthook/data};
    MAIN_PATH=${1:-/opt/cunthook};

    if ! [ -d "$DATA_PATH" ]; then
        echo -e "The data path \"$DATA_PATH\" doesn't exists. Creating... \n";
        mkdir -p "$MAIN_PATH" || {
            echo -e "Failed to created directory. using sudo...\n";
            sudo mkdir -p "$MAIN_PATH";
        };
        mkdir -p "$DATA_PATH" || {
            echo -e "Failed to create data path. using sudo...\n";
            sudo mkdir -p "$DATA_PATH";
        };

        echo "Created data path";
    fi

    echo -e "Checking data from \"Resources/config\" to \"$DATA_PATH\" \n";

    rsync -avh "Project/Data/" "$DATA_PATH" || { sudo rsync -avh "Project/Data/" "$DATA_PATH"; };
    rsync -avh --ignore-existing "Resources/config/" "$DATA_PATH" || { sudo rsync -avh --ignore-existing "Resources/config/" "$DATA_PATH"; };
    chown -R $user "$DATA_PATH" || { sudo chown -R $user "$DATA_PATH"; };
    chmod -R 774 "$DATA_PATH" || { sudo chmod -R 774 "$DATA_PATH"; };
}

#-- Checks what you have and what you don't for dependencys that are
#-- required for cunthook to function properly.
function DependencyCheck() {
    GIT=${1:-false};
    SUDO=${CH_SUDO:-sudo};
    FORCEYES=${CH_DEPENDENCYCHECK_FORCEYES:-false};

    gentoo_packages=(dev-vcs/git dev-libs/boost dev-util/cmake sys-devel/gcc sys-devel/gdb media-libs/libsdl2 media-libs/glew media-libs/freetype net-misc/rsync media-libs/libglvnd dev-util/dialog net-misc/curl);
    arch_packages=(git boost cmake make gcc gdb lib32-sdl2 lib32-glew lib32-freetype2 rsync lib32-libglvnd dialog curl);
    ubuntu_packages=(build-essential git g++ g++-multilib libboost-dev gdb libsdl2-dev:i386 libfreetype6-dev:i386 cmake dialog rsync curl);
    debian_packages=(build-essential git g++ g++-multilib libboost-dev gdb libsdl2-dev:i386 libfreetype6-dev:i386 cmake dialog rsync curl);
    fedora_packages=(cmake dialog make gcc-c++ glibc-devel.i686 freetype-devel.i686 SDL2-devel.i686 glew-devel.i686 boost-devel rsync gdb git curl);
    void_packages=(git gcc gdb gcc-multilib boost boost-devel-32bit SDL2-devel-32bit glew-devel-32bit freetype-devel-32bit libglvnd-devel-32bit rsync curl);

    if [ "$GIT" == true ]; then
        gentoo_packages=(dev-vcs/git);
        arch_packages=(git);
        ubuntu_packages=(git);
        debian_packages=(git);
        fedora_packages=(git);
        void_packages=(git);
    fi

    requestPermissions()
    {
        string=$*

        if [ "$FORCEYES" == "true" ]; then
            return
        elif [ -x "$(command -v zenity)" ] && xset q &>/dev/null; then
            zenity --no-wrap --question --text="Do you want to install the following packages?\n${string}?";
            out=$?;
            if [ "$out" != 0 ]; then
                exit;
            fi
        elif [ -t 0 ]; then
            read -p "Do you want to install the following packages? ${string} y/n " -r;
            if ! [[ $REPLY =~ ^[Yy]$ ]]; then
                exit;
            fi
        else
            echo -e "\033[1;33m\nWarning! Automatic package installation is not supported! Zenity+XOrg or interactive terminal required!\n\033[0m";
            exit;
        fi
    }

    DISTRO="$(awk -F= '$1=="ID" { print $2 ;}' /etc/os-release)";
    case "$DISTRO" in "gentoo")
            [ "$(type emerge)" ] || { 
                printf "/etc/os-release outputs 'ID=gentoo' but Portage is not present, exiting.."; 
                exit; 
            };
            OS="gentoo";
        ;; "manjaro")
            [ "$(type pacman)" ] || { 
                printf "/etc/os-release outputs 'ID=manjaro' but Pacman is not present, exiting.."; 
                exit;
            };
            OS="arch"
        ;; "garuda")
            [ "$(type pacman)" ] || { 
                printf "/etc/os-release outputs 'ID=garuda' but Pacman is not present, exiting.."; 
                exit;
            };
            OS="arch";
        ;; "arch")
            [ "$(type pacman)" ] || { 
                printf "/etc/os-release outputs 'ID=arch' but Pacman is not present, exiting.."; 
                exit; 
            };
            OS="arch";
        ;; "ubuntu")
            [ "$(type apt-get)" ] || { 
                printf "/etc/os-release outputs 'ID=ubuntu' but APT is not present, exiting.."; 
                exit; 
            };
            OS="ubuntu";
        ;; "debian")
            [ "$(type apt-get)" ] || { 
                printf "/etc/os-release outputs 'ID=debian' but APT is not present, exiting.."; 
                exit; 
            };
            OS="debian";
        ;;  "fedora")
            [ "$(type dnf)" ] || { 
                printf "/etc/os-release outputs 'ID=fedora' but DNF is not present, exiting.."; 
                exit; 
            };
            OS="fedora";
        ;; '"void"')
            [ "$(type xbps-install)" ] || { 
                printf "/etc/os-release outputs 'ID=void' but XBPS is not present, exiting.."; 
                exit; 
            };
            OS="void";
        ;;
    esac

    case "$OS" in "gentoo")
            requestPermissions "${gentoo_packages[@]}";
            USE=abi_x86_32 $SUDO emerge -vU "${gentoo_packages[@]}";
        ;; "arch")
            pacman -Qi "${arch_packages[@]}" > /dev/null 2>&1;
            out=$?;
            if [ "$out" = 1 ]; then
                requestPermissions "${arch_packages[@]}";
                $SUDO pacman -S --noconfirm --needed "${arch_packages[@]}";
            fi
        ;; "ubuntu")
            dpkg -s "${ubuntu_packages[@]}" > /dev/null 2>&1;
            out=$?;
            if [ "$out" = 0 ]; then
                dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12;
                out=$?;
            fi
            if [ "$out" = 1 ]; then
                requestPermissions "${ubuntu_packages[@]}";
                pkgs="${ubuntu_packages[*]}";
                $SUDO bash -c "apt-get update;dpkg --add-architecture i386;apt-get update;apt-get install -y $pkgs";
                dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12;
                out=$?;
                if [ "$out" = 1 ]; then
                    $SUDO bash -c "apt install -y software-properties-common && wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | apt-key add - && apt-add-repository -y 'deb https://apt.kitware.com/ubuntu/ $(lsb_release -c -s) main' && apt-get install -y cmake kitware-archive-keyring";
                fi
            fi
        ;; "debian")
        dpkg -s "${debian_packages[@]}" > /dev/null 2>&1
        out=$?
            if [ "$out" = 0 ]; then
                dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12;
                out=$?;
            fi
            if [ "$out" = 1 ]; then
                requestPermissions "${debian_packages[@]}";
                pkgs="${debian_packages[*]}";
                $SUDO bash -c "apt-get update;dpkg --add-architecture i386;apt-get update;apt-get install -y $pkgs";
                dpkg --compare-versions "$(dpkg-query --show --showformat '${Version}' cmake)" ge 3.12;
                out=$?;
                if [ "$out" = 1 ]; then
                    $SUDO bash -c "apt-get install -y cmake";
                fi
            fi
        ;; "fedora")
            rpm -q "${fedora_packages[@]}" > /dev/null 2>&1;
            out=$?;
            if [ "$out" != 0 ]; then
                requestPermissions "${fedora_packages[@]}";
                $SUDO dnf install -y "${fedora_packages[@]}";
            fi
        ;; "void")
            xbps-query "${void_packages[@]}" > /dev/null 2>&1;
            out=$?;
            if [ "$out" = 1 ]; then
                requestPermissions "${void_packages[@]}";
                $SUDO xbps-install -S void-repo-multilib;
                $SUDO xbps-install -S "${void_packages[@]}";
            fi
        ;; "*")
            printf "\033[1;33m\nWarning! Automatic package installation is not supported!\n\033[0m";
        ;;
    esac
}

function Update() {
    #-- Shlib configurations that help shell file scripts
    #-- https://unix.stackexchange.com/a/433816
    sed_escape() { sed -e 's/[]\/$*.^[]/\\&/g'; };
    cfg_write() { cfg_delete "$1" "$2"; echo "$2=$3" >> "$1"; };
    cfg_read() { test -f "$1" && grep "^$(echo "$2" | sed_escape)=" "$1" | sed "s/^$(echo "$2" | sed_escape)=//" | tail -1; };
    cfg_delete() { test -f "$1" && sed -i "/^$(echo $2 | sed_escape).*$/d" "$1"; };
    cfg_haskey() { test -f "$1" && grep "^$(echo "$2" | sed_escape)=" "$1" > /dev/null; };

    DependencyCheck;
    InstallData;

    BUFF=$(grep -c ^'processor' /proc/cpuinfo);
    pushd "Project/Build" && cmake ../ && cmake --build . --target cunthook -- -j$BUFF; popd;

    if [ "$(find ~/.steam/steam/steamapps/common/Team\ Fortress\ 2/tf/maps/ -maxdepth 1 -type f | grep -i '.*\.nav$')" == "" ]; then
        echo -e "\nInstalling NavMeshes (may require sudo)...";
        sudo cp -R Resources/meshes/* ~/.steam/steam/steamapps/common/Team\ Fortress\ 2/tf/maps;
        sudo chmod 755 -R ~/.steam/steam/steamapps/common/Team\ Fortress\ 2/tf/maps;
    else
        echo -e "\nNavMeshes already installed";
    fi
}


if ! [ -d "Project/Build" ]; then 
    echo -e "Build folder has not been created yet. Creating... \n";
    mkdir -p ./Project/Build;
    echo -e "Folder created";
    Update;
else
    Update;
    echo -e "\nFinished updating";
fi